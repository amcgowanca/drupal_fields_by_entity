<?php
/**
 * @file
 * fields_by_entity_sortables.module
 */

/**
 * Implements hook_theme().
 */
function fields_by_entity_sortables_theme() {
  return array(
    'fields_by_entity_sortables' => array(
      'render element' => 'elements',
    ),
    'fields_by_entity_sortables_item' => array(
      'render element' => 'elements',
    ),
  );
}

/**
 * Implements hook_element_info().
 */
function fields_by_entity_sortables_element_info() {
  return array(
    'fields_by_entity_sortables' => array(
      '#theme' => 'fields_by_entity_sortables',
      '#pre_render' => array(),
      '#element_validate' => array('fields_by_entity_sortables_validate'),
    ),
  );
}

/**
 * Implements hook_field_info().
 */
function fields_by_entity_sortables_field_info() {
  $info = array();
  $info['fields_by_entity_sortables'] = array(
    'label' => t('Sortable List (fields_by_entity)'),
    'description' => t('Allows for creating lists to be sorted based on the referenced data value(s) of another entity.'),
    'default_widget' => 'fields_by_entity_sortables',
    'default_formatter' => 'fields_by_entity_sortables_list',
    // This is a special element that is used within the hook_form_alter() for
    // overriding the field settings to only allow the cardinality to only be
    // specified as a single element due to the behavior of this field type.
    'cardinality_override' => array(
      'value' => FIELD_CARDINALITY_UNLIMITED,
    ),
  );
  return $info;
}

/**
 * Implements hook_field_settings_form().
 */
function fields_by_entity_sortables_field_settings_form($field, $instance, $has_data) {
  return fields_by_entity_field_settings_form($field, $instance, $has_data);
}

/**
 * Implements hook_field_widget_info().
 */
function fields_by_entity_sortables_field_widget_info() {
  $info = array();
  $info['fields_by_entity_sortables'] = array(
    'label' => t('Sortable list'),
    'description' => t('Provides a drag-drop table allowing users to sort values.'),
    'field types' => array('fields_by_entity_sortables'),
    'behaviors' => array(
      'multiple values' => FIELD_BEHAVIOR_CUSTOM,
      'default value' => FIELD_BEHAVIOR_NONE,
    ),
  );
  return $info;
}

/**
 * Builds an array of usable item values.
 *
 * @param array $items
 *   An array of value items.
 * @param \EntityListWrapper $value_field
 *   The EntityListWrapper object of the $field['settings']['value_field'].
 * @param bool $include_wrapper
 *   A boolean indicating whether the return array should include the single
 *   item's entity wrapper object.
 * @param bool $key_by_value
 *   A boolean indicating whether return array is keyed by the delta value or
 *   the item's value.
 *
 * @return array
 *   An array of valid usable values.
 */
function fields_by_entity_sortables_field_items_build(array $items, EntityListWrapper $value_field, $include_wrapper = TRUE, $key_by_value = TRUE) {
  $values = array();
  $field_values = array();
  foreach ($value_field as $value_wrapper) {
    $field_values[$value_wrapper->getIdentifier()] = $value_wrapper;
  }

  $weight = 0;
  foreach ($items as $delta => $item) {
    if (!empty($item['value']) && isset($field_values[$item['value']])) {
      $key = $key_by_value ? $field_values[$item['value']]->getIdentifier() : $delta;
      $values[$key] = array(
        'value' => $item['value'],
        'weight' => isset($item['weight']) ? $item['weight'] : $weight,
      );
      if ($include_wrapper) {
        $values[$key]['wrapper'] = $field_values[$item['value']];
      }
      $weight = $weight + 1;
    }
  }
  uasort($values, 'drupal_sort_weight');
  return $values;
}

/**
 * Implements hook_field_widget_form().
 */
function fields_by_entity_sortables_field_widget_form(&$form, &$form_state, $field, $instance, $langcode, $items, $delta, $element) {
  $element += array(
    '#type' => 'fields_by_entity_sortables',
    '#attributes' => array('id' => 'fields-by-entity-sortables'),
    '#header' => array(
      'text' => array('data' => t('Item label')),
      'weight' => array('data' => t('Item weight')),
    ),
    '#tree' => TRUE,
  );

  $field_settings = $field['settings'];
  if (!_fields_by_entity_field_settings_exist($field_settings)) {
    return $element;
  }

  if ($wrapper = fields_by_entity_get_entity($field)) {
    $value_field = fields_by_entity_get_value_field($field, $wrapper);
    // Build an array of contextual information related to this field's
    // widget for rendering.
    $field_context_info = array(
      'field ' => $field,
      'instance' => $instance,
      'langcode' => $langcode,
    );
    // Build a list of useable values and wrapper elements to build the widget
    // with as $items is not necessarily the most usable array of values given
    // we need to perform a search on the $item['value'] to retrieve the
    // entity wrapper element for it.
    $items = fields_by_entity_sortables_field_items_build($items, $value_field, TRUE, TRUE);

    switch ($instance['widget']['type']) {
      case 'fields_by_entity_sortables':
        $last_item_weight = _fields_by_entity_sortables_last_item_weight($items);
        $weight = $last_item_weight;
        $value_field_items = array();
        foreach ($value_field as $item) {
          $value_field_items[$item->getIdentifier()] = array(
            'wrapper' => $item,
            'weight' => isset($items[$item->getIdentifier()]) ? $items[$item->getIdentifier()]['weight'] : $weight,
          );
          $weight++;
        }
        uasort($value_field_items, 'drupal_sort_weight');

        foreach ($value_field_items as $key => $item) {
          $item_wrapper = $item['wrapper'];
          $item_weight = $item['weight'];

          $item_element = array(
            '#attributes' => array('class' => array('draggable', 'tabledrag-leaf')),
            'value' => array('#type' => 'value', '#value' => $item_wrapper->getIdentifier()),
            'text' => array(
              '#theme' => 'fields_by_entity_sortables_item',
              '#text' => $item_wrapper->label(),
            ),
            'weight' => array(
              '#type' => 'textfield',
              '#title' => t('Weight'),
              '#title_display' => 'invisible',
              '#size' => 3,
              '#default_value' => $item_weight,
              '#attributes' => array('class' => array('fields-by-entity-sortables--item-weight')),
              '#cell_attributes' => array('style' => 'width: 5%'),
            ),
          );
          drupal_alter('fields_by_entity_widget_form_item', $item_element, $item_wrapper, $wrapper, $field_context_info);
          $element[$item_wrapper->getIdentifier()] = $item_element;
        }

        $element['#attached']['drupal_add_tabledrag'][] = array('fields-by-entity-sortables', 'order', 'sibling', 'fields-by-entity-sortables--item-weight');
        break;
    }
  }
  return $element;
}

/**
 * Implements hook_field_formatter_info().
 */
function fields_by_entity_sortables_field_formatter_info() {
  $info = array();
  $info['fields_by_entity_sortables_list'] = array(
    'label' => t('List of sorted values (fields_by_entity)'),
    'description' => t('Renders a list of entity values based on sorted weights.'),
    'field types' => array('fields_by_entity_sortables'),
    'settings' => array(),
  );
  return $info;
}

/**
 * Implements hook_field_formatter_view().
 */
function fields_by_entity_sortables_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, $items, $display) {
  $element = array();
  if ($entity_wrapper = fields_by_entity_get_entity($field)) {
    $value_field = fields_by_entity_get_value_field($field, $entity_wrapper);
    $items = fields_by_entity_sortables_field_items_build($items, $value_field);
    $alter_context = array(
      'field' => $field,
      'instance' => $instance,
      'langcode' => $langcode,
    );
    switch ($display['type']) {
      case 'fields_by_entity_sortables_list':
        $element += array(
          '#theme' => 'item_list',
          '#items' => array(),
        );
        foreach ($items as $index => $item) {
          $item_element = array(
            '#theme' => 'fields_by_entity_sortables_item',
            '#text' => $item['wrapper']->label(),
            '#entity' => $item['wrapper'],
          );
          drupal_alter('fields_by_entity_formatter_item', $item_element, $item['wrapper'], $entity_wrapper, $alter_context);
          $element['#items'][] = array('data' => drupal_render($item_element));
        }
        break;
    }
  }
  return $element;
}

/**
 * Implements hook_form_alter().
 */
function fields_by_entity_sortables_form_alter(&$form, &$form_state, $form_id) {
  if ('field_ui_field_edit_form' == $form_id) {
    if ('fields_by_entity_sortables' == $form['#field']['type']) {
      if (isset($form['field']['cardinality'])) {
        unset($form['field']['cardinality']);
        $form['field']['cardinality'] = array(
          '#type' => 'value',
          '#value' => FIELD_CARDINALITY_UNLIMITED,
        );
      }
    }
  }
}

/**
 * Form element callback; validates the element `fields_by_entity_sortables`.
 */
function fields_by_entity_sortables_validate($element, &$form_state) {
  $values = array();
  foreach (element_children($element) as $index) {
    $item = $element[$index];
    if (!empty($item['value']['#value'])) {
      $values[$index] = array(
        'value' => $item['value']['#value'],
        'weight' => isset($item['weight']['#value']) ? $item['weight']['#value'] : 0,
      );
    }
    else {
      return form_error($element, t('Fields by Entity Sortables: invalid item value'));
    }
  }
  // Sort the submitted values by their `weight` value to ensure that the
  // correct ordering prior to checking their #required state.
  uasort($values, 'drupal_sort_weight');
  // If the field is required, verify that the order of the items are not
  // identical to the default order.
  if (isset($element['#required']) && $element['#required']) {
    $field = field_read_field($element['#field_name']);
    if ($entity_wrapper = fields_by_entity_get_entity($field)) {
      $value_field = fields_by_entity_get_value_field($field, $entity_wrapper);
      $original_values = array();
      foreach ($value_field as $item) {
        $original_values[] = $item->getIdentifier();
      }

      foreach (array_keys($values) as $index => $key) {
        if ($values[$key]['value'] == $original_values[$index]) {
          form_error($element, t('!name is required and therefore the order of items must be different than the default list presented.', array('!name' => $element['#title'])));
          break;
        }
      }
    }
  }

  form_set_value($element, $values, $form_state);
}

/**
 * Implements hook_field_is_empty().
 */
function fields_by_entity_sortables_field_is_empty($item, $field) {
  return FALSE;
}

/**
 * Theme callback; renders the list of sortable items via a table.
 */
function theme_fields_by_entity_sortables(&$variables) {
  $elements = &$variables['elements'];
  $table_element = array('rows' => array());
  foreach (array('header', 'attributes') as $key) {
    if (isset($elements['#' . $key])) {
      $table_element[$key] = $elements['#' . $key];
      unset($elements['#' . $key]);
    }
  }

  foreach (element_children($elements) as $delta) {
    $row = array('data' => array());
    if (isset($elements[$delta]['#attributes'])) {
      $row += $elements[$delta]['#attributes'];
    }

    foreach (element_children($elements[$delta]) as $cell_key) {
      if (!isset($elements[$delta][$cell_key]['#type']) || (isset($elements[$delta][$cell_key]['#type']) && 'value' != $elements[$delta][$cell_key]['#type'])) {
        $cell = array('data' => drupal_render($elements[$delta][$cell_key]));
        if (isset($elements[$delta][$cell_key]['#cell_attributes'])) {
          $cell += $elements[$delta][$cell_key]['#cell_attributes'];
        }
        $row['data'][] = $cell;
      }
    }
    $table_element['rows'][] = $row;
  }

  $elements['#children'] = theme('table', $table_element);
  return theme('form_element', $elements);
}

/**
 * Theme callback; renders a single sortable item.
 */
function theme_fields_by_entity_sortables_item(&$variables) {
  $element = &$variables['elements'];
  $element += array('#attributes' => array());
  $output = '<div' . drupal_attributes($element['#attributes']) . '>';
  if (!empty($element['#text'])) {
    $output .= $element['#text'];
  }
  $output .= '</div>';
  return $output;
}

/**
 * Retrieves the last item's weight without affecting $items.
 *
 * @param array $items
 *   An array of items already processed.
 *
 * @return int
 *   The weight of the last item. If no items, then 0 is returned.
 */
function _fields_by_entity_sortables_last_item_weight(array $items) {
  $last_item = array_pop($items);
  return isset($last_item['weight']) ? $last_item['weight'] : 0;
}
